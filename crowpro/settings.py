"""
Django settings for crowpro project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from pathlib import Path
from . import ckeditor_config as ck
from datetime import timedelta
from .production import *
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

DROPBOX_APP_KEY = os.getenv("DROPBOX_APP_KEY")
DROPBOX_APP_SECRET = os.getenv("DROPBOX_APP_SECRET")
DROPBOX_OAUTH2_REFRESH_TOKEN = os.getenv("DROPBOX_OAUTH2_REFRESH_TOKEN")
DROPBOX_OAUTH2_TOKEN = os.getenv("DROPBOX_OAUTH2_TOKEN")

DEBUG = os.getenv("DEBUG", False) == "True"
if DEBUG:
    print("--------------------Running in development mode-------------------------")
    SECRET_KEY = 'django-insecure-ww^e-y3ia1t$!&t%108!_q+0^rl1vj*-stv_t)p8cgxdc@vyjx'
    ALLOWED_HOSTS = []
    CORS_ALLOWED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://127.0.0.1:3000',
        'http://localhost:3000'

    ]
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://127.0.0.1:3000',
        'http://localhost:3000'

    ]
    CORS_ORIGINS_WHITELIST = [
        'http://127.0.0.1:8000',
        'http://127.0.0.1:3000',
        'http://localhost:3000'

    ]

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

    STATIC_URL = 'static/'
    MEDIA_URL = 'media/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    print("--------------------Running in production mode-------------------------")
    SECRET_KEY = SECRET_KEY
    ALLOWED_HOSTS = ALLOWED_HOSTS
    DATABASES = DATABASES
    CORS_ALLOWED_ORIGINS = CORS_ALLOWED_ORIGINS
    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS
    CORS_ORIGINS_WHITELIST = CORS_ORIGINS_WHITELIST
    SESSION_COOKIE_SAMESITE = 'None'
    CSRF_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

    STORAGES = STORAGES
    DEFAULT_FILE_STORAGE = 'storages.backends.dropbox.DropBoxStorage'
    STATICFILES_STORAGE = 'storages.backends.dropbox.DropboxStorage'

    # URL configuration for serving media files
    MEDIA_URL = 'https://www.dropbox.com/home/media/'
    STATIC_URL = 'https://www.dropbox.com/home/staticfiles/'


CK_EDITOR_5_UPLOAD_FILE_VIEW_NAME = "upload_file"
CKEDITOR_5_CONFIGS = ck.CKEDITOR_5_CONFIGS
CKEDITOR_5_FILE_UPLOAD_PERMISSION = ck.CKEDITOR_5_FILE_UPLOAD_PERMISSION
CKEDITOR_5_FILE_STORAGES = ck.STORAGES

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
]
CORS_ALLOW_CREDENTIALS = True

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'users',
    'api',
    'authentication',
    'blog',
    'logs',
    'django_ckeditor_5',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'storages',
    'drf_yasg',
    'django_user_agents',
    'admincharts',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'logs.middleware.RequestLoggingMiddleware',

]

ROOT_URLCONF = 'crowpro.urls'

TEMPLATE_DIR = BASE_DIR / 'templates'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crowpro.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'api.auth.CookieJWTAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    )
}

SIMPLE_JWT = {
    "TOKEN_BLACKLIST_ENABLED": True,
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
}

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
AUTH_USER_MODEL = 'users.User'

GEOIP_PATH = os.path.join(BASE_DIR, 'geoip')

